name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-backend:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: window-explorer
          POSTGRES_PASSWORD: window-explorer_password
          POSTGRES_DB: window-explorer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: |
          cd packages/backend
          bun install

      - name: Run Prisma migrations
        run: |
          cd packages/backend
          bunx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://window-explorer:window-explorer_password@localhost:5432/window-explorer_test?schema=public

      - name: Run unit tests
        run: |
          cd packages/backend
          bun test:unit

      - name: Run integration tests
        run: |
          cd packages/backend
          bun test:integration
        env:
          DATABASE_URL_TEST: postgresql://window-explorer:window-explorer_password@localhost:5432/window-explorer_test?schema=public

  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: |
          cd packages/frontend
          bun install

      - name: Run unit tests
        run: |
          cd packages/frontend
          bun test

      - name: Run component tests
        run: |
          cd packages/frontend
          bun test:coverage

  test-worker:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: |
          cd packages/worker
          bun install

      - name: Run unit tests
        run: |
          cd packages/worker
          bun test:unit

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-worker]

    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Playwright
        run: |
          cd packages/frontend
          bun add -D @playwright/test
          bunx playwright install --with-deps

      - name: Start services with Docker Compose
        run: |
          docker-compose up -d
          sleep 30

      - name: Run E2E tests
        run: |
          cd packages/frontend
          bunx playwright test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: packages/frontend/playwright-report/

      - name: Stop services
        if: always()
        run: docker-compose down

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-worker, e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/frontend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}

      - name: Build and push Worker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/worker/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-worker:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-worker:${{ github.sha }}