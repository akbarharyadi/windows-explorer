services:
  postgres:
    image: postgres:16-alpine
    container_name: window-explorer-postgres-prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - window-explorer-network

  backend:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile
    container_name: window-explorer-backend-prod
    restart: always
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
      PORT: 3000
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD',
          'bun',
          'run',
          '-e',
          "fetch('http://localhost:3000/health').then(r => r.ok ? process.exit(0) : process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - window-explorer-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    command: >
      sh -c "
        bunx prisma migrate deploy &&
        bunx prisma generate &&
        bun run dist/index.js
      "

  frontend:
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile
    container_name: window-explorer-frontend-prod
    restart: always
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost/health.html']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - window-explorer-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  nginx:
    image: nginx:alpine
    container_name: window-explorer-nginx-prod
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - window-explorer-network

volumes:
  postgres_prod_data:
    driver: local

networks:
  window-explorer-network:
    driver: bridge
