version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: window-explorer-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-window-explorer}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-window-explorer_password}
      POSTGRES_DB: ${POSTGRES_DB:-window-explorer_db}
    ports:
      - '${POSTGRES_PORT:-5432}:5432}'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-window-explorer}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - window-explorer-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: window-explorer-redis
    restart: unless-stopped
    ports:
      - '${REDIS_PORT:-6379}:6379}'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - window-explorer-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: window-explorer-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-window-explorer}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-window-explorer_password}
    ports:
      - '${RABBITMQ_PORT:-5672}:5672}'
      - '${RABBITMQ_MANAGEMENT_PORT:-15672}:15672}'
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ['CMD', 'rabbitmqctl', 'status']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - window-explorer-network

  # Backend API (Elysia + Bun)
  backend:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile
    container_name: window-explorer-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-window-explorer}:${POSTGRES_PASSWORD:-window-explorer_password}@postgres:5432/${POSTGRES_DB:-window-explorer_db}?schema=public
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-window-explorer}:${RABBITMQ_PASSWORD:-window-explorer_password}@rabbitmq:5672
      PORT: 3000
      NODE_ENV: production
    ports:
      - '${BACKEND_PORT:-3000}:3000}'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD',
          'bun',
          'run',
          '-e',
          "fetch('http://localhost:3000/health').then(r => r.ok ? process.exit(0) : process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - window-explorer-network
    command: >
      sh -c "
        bunx prisma migrate deploy &&
        bunx prisma generate &&
        bun run dist/index.js
      "

  # Worker Service
  worker:
    build:
      context: .
      dockerfile: packages/worker/Dockerfile
    container_name: window-explorer-worker
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-window-explorer}:${POSTGRES_PASSWORD:-window-explorer_password}@postgres:5432/${POSTGRES_DB:-window-explorer_db}?schema=public
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-window-explorer}:${RABBITMQ_PASSWORD:-window-explorer_password}@rabbitmq:5672
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'if [ -f /app/.worker_running ]; then exit 0; else exit 1; fi']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - window-explorer-network
    command: >
      sh -c "
        bun run dist/index.js
      "

  # Frontend (Vue 3 + Nginx)
  frontend:
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile
    container_name: window-explorer-frontend
    restart: unless-stopped
    ports:
      - '${FRONTEND_PORT:-8080}:80}'
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost/health.html']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - window-explorer-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  window-explorer-network:
    driver: bridge
